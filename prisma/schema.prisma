generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id                String          @id @default(uuid())
  userId            String
  title             String          @db.Text
  level             String?         
  type              String?         
  description       String?         @db.Text
  metaDescription   String?     @db.Text
  imageUrl          String?         @db.Text
  price             Float?
  language          String?
  duration          String?
  video             Boolean?
  isPublished       Boolean         @default(false)
  categoryId        String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  category          Category?       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  attachments       Attachment[]
  chapters          Chapter[]
  purchases         Purchase[]

  @@index([categoryId])
  @@fulltext([title])
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String   @db.Text
  courseId  String?
  chapterId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([chapterId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Chapter {
  id           String         @id @default(uuid())
  title        String
  description  String?        @db.Text
  content      String?        @db.Text
  videoUrl     String?        @db.Text
  position     Int
  duration     String?
  isPublished  Boolean        @default(false)
  isFree       Boolean        @default(false)
  courseId     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  attachments  Attachment[]
  muxData      MuxData?
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?
  chapterId  String  @unique
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId])
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
